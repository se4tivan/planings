import os
import sys
import requests
import schedule
import time
from datetime import datetime
import pytz
from openpyxl import load_workbook
from telegram.ext import Updater, CommandHandler
from flask import Flask
from io import BytesIO
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TELEGRAM_BOT_TOKEN = "7738985245:AAEtSoP8Jc8vRuNEZd5RJQpJ-0NCMaW7Xys"
CHAT_ID = "-1002017911073"  # ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
MOSCOW_TZ = pytz.timezone('Europe/Moscow')
EXCEL_URL = "https://cloud.toplubricants.ru/s/yWSpybsLPZkjjzp/download"

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
previous_data = {}

def is_workday():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–ü–Ω-–ü—Ç, 8:00-18:00)"""
    try:
        now = datetime.now(MOSCOW_TZ)
        return (
            now.weekday() < 5 and  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ = 6
            8 <= now.hour < 18
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")
        return False

def download_excel():
    """–ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ"""
    try:
        logger.info("–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞")
        response = requests.get(EXCEL_URL)
        response.raise_for_status()
        logger.info("Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        return response.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Excel —Ñ–∞–π–ª–∞: {str(e)}")
        return None

def read_planning_data():
    """–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    try:
        excel_content = download_excel()
        if excel_content is None:
            return None
        
        logger.info("–ù–∞—á–∞–ª–æ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel")
        wb = load_workbook(filename=BytesIO(excel_content), read_only=True)
        ws = wb.active
        current_data = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
        rows = list(ws.iter_rows(min_row=2))
        logger.info(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {len(rows)}")
        
        for row_num, row in enumerate(rows, start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤
                if len(row) < 13:
                    continue
                    
                order_num = row[11].value  # –°—Ç–æ–ª–±–µ—Ü L
                driver = row[12].value  # –°—Ç–æ–ª–±–µ—Ü M
                vehicle = row[8].value  # –°—Ç–æ–ª–±–µ—Ü I
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not order_num or not driver or not vehicle:
                    continue
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info(f"–°—Ç—Ä–æ–∫–∞ {row_num}: –Ω–æ–º–µ—Ä={order_num}, –≤–æ–¥–∏—Ç–µ–ª—å={driver}, –º–∞—à–∏–Ω–∞={vehicle}")
                
                current_data[str(order_num)] = {
                    'date': row[0].value,  # –°—Ç–æ–ª–±–µ—Ü A
                    'driver': driver,
                    'vehicle': vehicle,
                    'row_num': row_num  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
                }
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {row_num}: {str(e)}")
                continue
        
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ {len(current_data)} –∑–∞–∫–∞–∑–æ–≤")
        return current_data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}")
        return None

def check_changes():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–ª–∞–Ω–∏–Ω–≥–µ"""
    try:
        if not is_workday():
            return
        
        global previous_data
        current_data = read_planning_data()
        
        if current_data is None:
            return
        
        if not previous_data:
            previous_data = current_data
            return
        
        messages = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        for order_num, current_info in current_data.items():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–æ 744
            if current_info['row_num'] < 744:
                continue
                
            if order_num not in previous_data:
                messages.append(
                    f"üìÖ {current_info['date'].strftime('%d.%m.%Y')}\n"
                    f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑: {order_num}\n"
                    f"–í–æ–¥–∏—Ç–µ–ª—å: {current_info['driver']}\n"
                    f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {current_info['vehicle']}"
                )
            else:
                prev_info = previous_data[order_num]
                if current_info['driver'] != prev_info['driver']:
                    messages.append(
                        f"üë®‚Äç‚úàÔ∏è –ó–∞–º–µ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è –≤ –∑–∞–∫–∞–∑–µ {order_num}\n"
                        f"–ë—ã–ª–æ: {prev_info['driver']}\n"
                        f"–°—Ç–∞–ª–æ: {current_info['driver']}"
                    )
                if current_info['vehicle'] != prev_info['vehicle']:
                    messages.append(
                        f"üöõ –ó–∞–º–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤ –∑–∞–∫–∞–∑–µ {order_num}\n"
                        f"–ë—ã–ª–æ: {prev_info['vehicle']}\n"
                        f"–°—Ç–∞–ª–æ: {current_info['vehicle']}"
                    )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        for order_num, prev_info in previous_data.items():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–æ 744
            if prev_info['row_num'] < 744:
                continue
                
            if order_num not in current_data:
                messages.append(f"‚ùå –£–¥–∞–ª–µ–Ω –∑–∞–∫–∞–∑: {order_num}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
        if messages:
            send_telegram_messages(messages)
        
        previous_data = current_data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {str(e)}")

def send_telegram_messages(messages):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –∫–∞–Ω–∞–ª"""
    try:
        updater = Updater(TELEGRAM_BOT_TOKEN)
        for message in messages:
            try:
                updater.bot.send_message(
                    chat_id=CHAT_ID,
                    text=message,
                    parse_mode='HTML'
                )
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª: {message[:50]}...")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {str(e)}")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")

def start_monitoring():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        schedule.every(5).minutes.do(check_changes)
        
        while True:
            schedule.run_pending()
            time.sleep(60)
    except:
        pass

def format_phone_number(phone):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç 8(888)888-88-88"""
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        digits = ''.join(filter(str.isdigit, str(phone)))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–æ–º–µ—Ä–∞
        if len(digits) != 11:
            return phone  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
        return f"8({digits[1:4]}){digits[4:7]}-{digits[7:9]}-{digits[9:]}"
    except:
        return phone  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

def status(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    try:
        chat_id = update.effective_chat.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /status –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        
        if is_workday():
            response = '–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–ª–∞–Ω–∏–Ω–≥–µ.'
        else:
            response = '–ë–æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω: –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å.'
        
        update.message.reply_text(response)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {response}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /status: {str(e)}")
        try:
            update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞")
        except:
            pass

def chatid(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chatid"""
    try:
        chat_id = update.effective_chat.id
        chat_type = update.effective_chat.type
        update.message.reply_text(f'ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_id}\n–¢–∏–ø —á–∞—Ç–∞: {chat_type}')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /chatid: {str(e)}")

def start(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        chat_id = update.effective_chat.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        update.message.reply_text('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø–ª–∞–Ω–∏–Ω–≥!')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {str(e)}")

def send_test_message():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        updater = Updater(TELEGRAM_BOT_TOKEN)
        message = (
            "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "/status - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞\n"
            "/chatid - –ø–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞\n\n"
            "–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–ª–∞–Ω–∏–Ω–≥–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
        )
        updater.bot.send_message(chat_id=CHAT_ID, text=message)
        logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

def check_message(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è '–ü—Ä–æ–≤–µ—Ä–∫–∞'"""
    try:
        chat_id = update.effective_chat.id
        message_text = update.message.text.lower()
        
        if message_text == "–ø—Ä–æ–≤–µ—Ä–∫–∞":
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ü—Ä–æ–≤–µ—Ä–∫–∞' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
            updater = Updater(TELEGRAM_BOT_TOKEN)
            status_message = (
                "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!\n\n"
                "–°—Ç–∞—Ç—É—Å:\n"
                f"‚Ä¢ –ö–∞–Ω–∞–ª: {CHAT_ID}\n"
                f"‚Ä¢ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: {'–î–∞' if is_workday() else '–ù–µ—Ç'}\n"
                "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π: –ê–∫—Ç–∏–≤–µ–Ω"
            )
            
            try:
                updater.bot.send_message(
                    chat_id=CHAT_ID,
                    text=status_message,
                    parse_mode='HTML'
                )
                logger.info("–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∫–∞–Ω–∞–ª: {str(e)}")
                update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∫–∞–Ω–∞–ª")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        try:
            update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
        except:
            pass

def main():
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
        updater = Updater(TELEGRAM_BOT_TOKEN)
        dp = updater.dispatcher
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CommandHandler("status", status))
        dp.add_handler(CommandHandler("chatid", chatid))
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        from telegram.ext import MessageHandler, Filters
        dp.add_handler(MessageHandler(Filters.text & ~Filters.command, check_message))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        updater.start_polling()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        send_test_message()
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import threading
        monitoring_thread = threading.Thread(target=start_monitoring)
        monitoring_thread.daemon = True
        monitoring_thread.start()
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
        
        # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
        port = int(os.environ.get("PORT", 8080))
        app.run(host='0.0.0.0', port=port)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        sys.exit(1)

if __name__ == '__main__':
    try:
        main()
    except:
        sys.exit(1) 
